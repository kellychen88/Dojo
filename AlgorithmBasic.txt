

7. Array with Odd Numbers
Write a program that creates an array 'Y' that contains all the odd numbers between 1 to 255. 
When the program is done, 'y' should have the value of [1, 3, 5, 7, ... 255].

var my = [];

for (i = 0; i <= 255; i++){
  if (i%2 == 1){
    my.push(i);
    console.log(i);
  }
}

8. Greater Than y
Write a program that takes an array and returns the number of values in that array whose value is greater than y. 
For example if array = [1,3, 5, 7] and y = 3, after your program is run it will print 2 (since there are two values in the array whose value is greater than 3).

var my = [1,3, 5, 7, 2, 9];
var y = 3;
var count = 0;

for (var i=0; i < my.length; i++){
  if (my[i] > y){
    count = count + 1;
  }
}
console.log(count);

9. Square the values
Given an array x (e.g. [1,5, 10, -2]), create an algorithm (sets of instructions) that doubles each value in the array.  
When the program is done x should have values that have been doubled (e.g. [1, 25, 100, 4]).

var my = [1, 3, 5, -2];
var y = 3;

for (var i=0; i < my.length; i++){
  my[i] = my[i]*my[i];
  console.log(my[i]);
}

10. Eliminate Negative Numbers
Given an array x (e.g. [1,5, 10, -2]), create an algorithm (sets of instructions) that replaces any negative number with the value of 0.  
When the program is done x should have no negative values (e.g. [1, 5, 10, 0]).

var my = [1, 3, 5, -2];
var y = 3;

for (var i=0; i < my.length; i++){
  if (my[i] < 0) {
    my.pop();
  }
  console.log(my[i]);
}
console.log(my);

11. Max, Min, and Average 
Given an array x (e.g. [1,5, 10, -2]), 
create an algorithm (sets of instructions) that prints the maximum number in the array, minimum value in the array as well as the average values in the array. 

var my = [7, 3, 5, 11];
var max=my[0];
var min=my[0];
var avg =0;
var sum=0;

for (var i=0; i < my.length; i++){
    max = Math.max(my[i], max);
    min = Math.min(my[i], min);
    sum += my[i];  
}
    avg = sum/my.length;

console.log("min : " + min);
console.log("max : " + max);
console.log("sum : " + sum);
console.log("average : " + avg);

12. Shifting the values in the array
Given an array x (e.g. [1,5, 10, 7, -2]), create an algorithm (sets of instructions) that shifts each number by one (to the front).  
For example when the program is done x (assuming it was [1,5,10,7,-2]) should become [5,10,7,-2,0].

var my = [1,-5,10,7,-2];

for (var i=0; i < my.length; i++) {
  my[i] = my[i+1];
}

my[my.length-1] = 0;
//my.pop()
//my.push(0);
console.log(my);


13. Number to string
Write a program that takes an array of numbers and replaces any number that's negative to a string called 'Dojo'. 
For example if array = [-1, -3, 2] after your program is done array should be ['Dojo', 'Dojo', 2].
var my = [1,-5,10,7,-2];

for (var i=0; i < my.length; i++) {
  if (my[i] < 0) {
    my[i] = "Dojo";
  }
}
console.log(my);

Intermediate Algorithms

1. Swapping Two values
Write a program that takes an array of numbers and returns an array where the first and last numbers in the array have been switched.

For example say x = [2, 3, 5, 7, 6]. 
By the end of the program x, should be [6, 3, 5, 7, 2]. Do this without creating an empty array.

var arr = [2, 3, 5, 7, 6];
var n = arr.length-1;
var temp=0;

temp = arr[0];
arr[0] = arr[n];
arr[n] = temp;

console.log(arr);

2. Reverse Order
Write a program that takes an array of numbers and reverses the order of the numbers. 
For example say x = [1, 3, 5, 7, 2]. By the end of the program x should be [2, 7, 5, 3, 1]. 
Note that we're not asking you to merely print the values of x in a reverse order but to really have x store a reversed array.  
Do this without creating an empty array.



3. Insert X in Y
Write a program that inserts a new number X at an index Y. For example if array = [1, 3, 5, 7] and X = 10, and Y = 2, 
by the end of your program array should be [1, 3, 10, 5, 7] (in other words we added '10' on index 2).

Check the output of your array once your program is completed to make sure it's working correctly.

var array = [1, 3, 5, 7];
var x = 10;
var y = 2;
//result = [1, 3, 10, 5, 7]
n = array.length-1;

array.splice(2,0,10);  //add 10 to index 2 and 0 should be remove

console.log(array);


3. 35
Add all the values between 100 and 4000000 inclusively that are divisable by 3 or 5 but not both 3 and 5

for (var i=100; i <= 4000000 ; i++){
  if (i%3 == 0 || i%5 == 0) {
    if (i%15 !=0){
      console.log(i) 
    }
  }
}

4. Remove Last Value
Now we're going to introduce another function called POP(); This method removes the last element/value in the array. For example say x = [1, 3, 5, 7]. Doing POP(x) would make x = [1, 3, 5].

Now using this function, see how you could remove the last two values/elements in the given array. 
Would your program still work if the given array has less than two values? 
How could you write program so that it would work regardless of the size of the array you're given?

var array = [1,3, 5, 7];
n = array.length;

if (n > 1){
  array.pop();
  console.log(array);  
} 

5. Remove Negatives
Write a program that takes any given array and removes any negative numbers in the array. 
For example, if myAwesomeArray = [-1, -3, 3, -5, 2], then after your program is done, 
myAwesomeArray could be [3, 2] or [2,3] depending on your algorithm. Do this without having to create another array.

NOTE: Remember that POP() only removes the last value of the array!



